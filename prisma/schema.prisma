// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  
  address        String?

  accounts Account[]
  product  Product[]
  order    Order[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id") 
  userId            String  
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  acess_token       String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id           String   @id @default(cuid()) @map("_id") 
  title        String
  description  String
  image        String
  createdAt    DateTime @default(now())
  category     String
  price        Int
  igredients   String[]
  userId       String   
  categoriesId String?  

  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  order      Order[]
  Categories Categories? @relation(fields: [categoriesId], references: [id])
}

model Categories {
  id         String    @id @default(cuid()) @map("_id") 
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  products Product[]
}

model Order {
  id         String   @id @default(cuid()) @map("_id") 
  userId     String   
  productId  String   
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
